{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\r\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\r\n *\r\n *   ```\r\n *   2.1.3\r\n *   time interval\r\n *   part of the time axis limited by two instants\r\n *   ```\r\n *\r\n *   Also, this function now accepts an object with `start` and `end` properties\r\n *   instead of two arguments as an interval.\r\n *   This function now throws `RangeError` if the start of the interval is after its end\r\n *   or if any date in the interval is `Invalid Date`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   isWithinRange(\r\n *     new Date(2014, 0, 3),\r\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   isWithinInterval(\r\n *     new Date(2014, 0, 3),\r\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Date|Number} date - the date to check\r\n * @param {Interval} interval - the interval to check\r\n * @returns {Boolean} the date is within the interval\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // For date equal to interval start:\r\n * isWithinInterval(date, { start, end: date }) // => true\r\n *\r\n * @example\r\n * // For date equal to interval end:\r\n * isWithinInterval(date, { start: date, end }) // => true\r\n */\n\nexport default function isWithinInterval(dirtyDate, interval) {\n  requiredArgs(2, arguments);\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","map":{"version":3,"sources":["C:/Users/HI/desktop/zc_plugin_company_holiday_calendar/calendar_frontend/node_modules/date-fns/esm/isWithinInterval/index.js"],"names":["toDate","requiredArgs","isWithinInterval","dirtyDate","interval","arguments","time","getTime","startTime","start","endTime","end","RangeError"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,QAArC,EAA+C;AAC5DH,EAAAA,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;AACA,MAAIC,IAAI,GAAGN,MAAM,CAACG,SAAD,CAAN,CAAkBI,OAAlB,EAAX;AACA,MAAIC,SAAS,GAAGR,MAAM,CAACI,QAAQ,CAACK,KAAV,CAAN,CAAuBF,OAAvB,EAAhB;AACA,MAAIG,OAAO,GAAGV,MAAM,CAACI,QAAQ,CAACO,GAAV,CAAN,CAAqBJ,OAArB,EAAd,CAJ4D,CAId;;AAE9C,MAAI,EAAEC,SAAS,IAAIE,OAAf,CAAJ,EAA6B;AAC3B,UAAM,IAAIE,UAAJ,CAAe,kBAAf,CAAN;AACD;;AAED,SAAON,IAAI,IAAIE,SAAR,IAAqBF,IAAI,IAAII,OAApC;AACD","sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n\r\n/**\r\n * @name isWithinInterval\r\n * @category Interval Helpers\r\n * @summary Is the given date within the interval?\r\n *\r\n * @description\r\n * Is the given date within the interval? (Including start and end.)\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\r\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\r\n *\r\n *   ```\r\n *   2.1.3\r\n *   time interval\r\n *   part of the time axis limited by two instants\r\n *   ```\r\n *\r\n *   Also, this function now accepts an object with `start` and `end` properties\r\n *   instead of two arguments as an interval.\r\n *   This function now throws `RangeError` if the start of the interval is after its end\r\n *   or if any date in the interval is `Invalid Date`.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *\r\n *   isWithinRange(\r\n *     new Date(2014, 0, 3),\r\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\r\n *   )\r\n *\r\n *   // v2.0.0 onward\r\n *\r\n *   isWithinInterval(\r\n *     new Date(2014, 0, 3),\r\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\r\n *   )\r\n *   ```\r\n *\r\n * @param {Date|Number} date - the date to check\r\n * @param {Interval} interval - the interval to check\r\n * @returns {Boolean} the date is within the interval\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // For the date within the interval:\r\n * isWithinInterval(new Date(2014, 0, 3), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> true\r\n *\r\n * @example\r\n * // For the date outside of the interval:\r\n * isWithinInterval(new Date(2014, 0, 10), {\r\n *   start: new Date(2014, 0, 1),\r\n *   end: new Date(2014, 0, 7)\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // For date equal to interval start:\r\n * isWithinInterval(date, { start, end: date }) // => true\r\n *\r\n * @example\r\n * // For date equal to interval end:\r\n * isWithinInterval(date, { start: date, end }) // => true\r\n */\r\nexport default function isWithinInterval(dirtyDate, interval) {\r\n  requiredArgs(2, arguments);\r\n  var time = toDate(dirtyDate).getTime();\r\n  var startTime = toDate(interval.start).getTime();\r\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\r\n\r\n  if (!(startTime <= endTime)) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  return time >= startTime && time <= endTime;\r\n}"]},"metadata":{},"sourceType":"module"}