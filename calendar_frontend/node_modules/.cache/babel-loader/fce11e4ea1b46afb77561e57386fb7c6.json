{"ast":null,"code":"import compareAscending from './_compareAscending.js';\n/**\r\n * Used by `_.orderBy` to compare multiple properties of a value to another\r\n * and stable sort them.\r\n *\r\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\r\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\r\n * of corresponding values.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {boolean[]|string[]} orders The order to sort by for each property.\r\n * @returns {number} Returns the sort order indicator for `object`.\r\n */\n\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  } // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n\n\n  return object.index - other.index;\n}\n\nexport default compareMultiple;","map":{"version":3,"sources":["C:/Users/HI/desktop/zc_plugin_company_holiday_calendar/calendar_frontend/node_modules/lodash-es/_compareMultiple.js"],"names":["compareAscending","compareMultiple","object","other","orders","index","objCriteria","criteria","othCriteria","length","ordersLength","result","order"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,wBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgD;AAC9C,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,WAAW,GAAGJ,MAAM,CAACK,QADzB;AAAA,MAEIC,WAAW,GAAGL,KAAK,CAACI,QAFxB;AAAA,MAGIE,MAAM,GAAGH,WAAW,CAACG,MAHzB;AAAA,MAIIC,YAAY,GAAGN,MAAM,CAACK,MAJ1B;;AAMA,SAAO,EAAEJ,KAAF,GAAUI,MAAjB,EAAyB;AACvB,QAAIE,MAAM,GAAGX,gBAAgB,CAACM,WAAW,CAACD,KAAD,CAAZ,EAAqBG,WAAW,CAACH,KAAD,CAAhC,CAA7B;;AACA,QAAIM,MAAJ,EAAY;AACV,UAAIN,KAAK,IAAIK,YAAb,EAA2B;AACzB,eAAOC,MAAP;AACD;;AACD,UAAIC,KAAK,GAAGR,MAAM,CAACC,KAAD,CAAlB;AACA,aAAOM,MAAM,IAAIC,KAAK,IAAI,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAA3B,CAAb;AACD;AACF,GAhB6C,CAiB9C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOV,MAAM,CAACG,KAAP,GAAeF,KAAK,CAACE,KAA5B;AACD;;AAED,eAAeJ,eAAf","sourcesContent":["import compareAscending from './_compareAscending.js';\r\n\r\n/**\r\n * Used by `_.orderBy` to compare multiple properties of a value to another\r\n * and stable sort them.\r\n *\r\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\r\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\r\n * of corresponding values.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {boolean[]|string[]} orders The order to sort by for each property.\r\n * @returns {number} Returns the sort order indicator for `object`.\r\n */\r\nfunction compareMultiple(object, other, orders) {\r\n  var index = -1,\r\n      objCriteria = object.criteria,\r\n      othCriteria = other.criteria,\r\n      length = objCriteria.length,\r\n      ordersLength = orders.length;\r\n\r\n  while (++index < length) {\r\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\r\n    if (result) {\r\n      if (index >= ordersLength) {\r\n        return result;\r\n      }\r\n      var order = orders[index];\r\n      return result * (order == 'desc' ? -1 : 1);\r\n    }\r\n  }\r\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\r\n  // that causes it, under certain circumstances, to provide the same value for\r\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\r\n  // for more details.\r\n  //\r\n  // This also ensures a stable sort in V8 and other engines.\r\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\r\n  return object.index - other.index;\r\n}\r\n\r\nexport default compareMultiple;\r\n"]},"metadata":{},"sourceType":"module"}