{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name startOfWeek\r\n * @category Week Helpers\r\n * @summary Return the start of a week for the given date.\r\n *\r\n * @description\r\n * Return the start of a week for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @returns {Date} the start of a week\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n *\r\n * @example\r\n * // The start of a week for 2 September 2014 11:55:00:\r\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\r\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\r\n * //=> Mon Sep 01 2014 00:00:00\r\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","map":{"version":3,"sources":["C:/Users/HI/desktop/zc_plugin_company_holiday_calendar/calendar_frontend/node_modules/date-fns/esm/startOfWeek/index.js"],"names":["toDate","toInteger","requiredArgs","startOfWeek","dirtyDate","dirtyOptions","arguments","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","date","day","getDay","diff","setDate","getDate","setHours"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,YAAhC,EAA8C;AAC3DH,EAAAA,YAAY,CAAC,CAAD,EAAII,SAAJ,CAAZ;AACA,MAAIC,OAAO,GAAGF,YAAY,IAAI,EAA9B;AACA,MAAIG,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,MAAIC,kBAAkB,GAAGD,MAAM,IAAIA,MAAM,CAACD,OAAjB,IAA4BC,MAAM,CAACD,OAAP,CAAeG,YAApE;AACA,MAAIC,mBAAmB,GAAGF,kBAAkB,IAAI,IAAtB,GAA6B,CAA7B,GAAiCR,SAAS,CAACQ,kBAAD,CAApE;AACA,MAAIC,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,IAAxB,GAA+BC,mBAA/B,GAAqDV,SAAS,CAACM,OAAO,CAACG,YAAT,CAAjF,CAN2D,CAM8C;;AAEzG,MAAI,EAAEA,YAAY,IAAI,CAAhB,IAAqBA,YAAY,IAAI,CAAvC,CAAJ,EAA+C;AAC7C,UAAM,IAAIE,UAAJ,CAAe,kDAAf,CAAN;AACD;;AAED,MAAIC,IAAI,GAAGb,MAAM,CAACI,SAAD,CAAjB;AACA,MAAIU,GAAG,GAAGD,IAAI,CAACE,MAAL,EAAV;AACA,MAAIC,IAAI,GAAG,CAACF,GAAG,GAAGJ,YAAN,GAAqB,CAArB,GAAyB,CAA1B,IAA+BI,GAA/B,GAAqCJ,YAAhD;AACAG,EAAAA,IAAI,CAACI,OAAL,CAAaJ,IAAI,CAACK,OAAL,KAAiBF,IAA9B;AACAH,EAAAA,IAAI,CAACM,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,SAAON,IAAP;AACD","sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport toInteger from \"../_lib/toInteger/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name startOfWeek\r\n * @category Week Helpers\r\n * @summary Return the start of a week for the given date.\r\n *\r\n * @description\r\n * Return the start of a week for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @returns {Date} the start of a week\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n *\r\n * @example\r\n * // The start of a week for 2 September 2014 11:55:00:\r\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\r\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\r\n * //=> Mon Sep 01 2014 00:00:00\r\n */\r\n\r\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\r\n  requiredArgs(1, arguments);\r\n  var options = dirtyOptions || {};\r\n  var locale = options.locale;\r\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\r\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\r\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\r\n\r\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\r\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\r\n  }\r\n\r\n  var date = toDate(dirtyDate);\r\n  var day = date.getDay();\r\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\r\n  date.setDate(date.getDate() - diff);\r\n  date.setHours(0, 0, 0, 0);\r\n  return date;\r\n}"]},"metadata":{},"sourceType":"module"}