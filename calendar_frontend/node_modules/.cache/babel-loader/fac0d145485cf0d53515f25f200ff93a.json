{"ast":null,"code":"import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n/** Used as the size to enable large array optimizations. */\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\n\nfunction stackSet(key, value) {\n  var data = this.__data__;\n\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n\n    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n\n    data = this.__data__ = new MapCache(pairs);\n  }\n\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;","map":{"version":3,"sources":["C:/Users/HI/desktop/zc_plugin_company_holiday_calendar/calendar_frontend/node_modules/lodash-es/_stackSet.js"],"names":["ListCache","Map","MapCache","LARGE_ARRAY_SIZE","stackSet","key","value","data","__data__","pairs","length","push","size","set"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,GAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,IAAI,GAAG,KAAKC,QAAhB;;AACA,MAAID,IAAI,YAAYP,SAApB,EAA+B;AAC7B,QAAIS,KAAK,GAAGF,IAAI,CAACC,QAAjB;;AACA,QAAI,CAACP,GAAD,IAASQ,KAAK,CAACC,MAAN,GAAeP,gBAAgB,GAAG,CAA/C,EAAmD;AACjDM,MAAAA,KAAK,CAACE,IAAN,CAAW,CAACN,GAAD,EAAMC,KAAN,CAAX;AACA,WAAKM,IAAL,GAAY,EAAEL,IAAI,CAACK,IAAnB;AACA,aAAO,IAAP;AACD;;AACDL,IAAAA,IAAI,GAAG,KAAKC,QAAL,GAAgB,IAAIN,QAAJ,CAAaO,KAAb,CAAvB;AACD;;AACDF,EAAAA,IAAI,CAACM,GAAL,CAASR,GAAT,EAAcC,KAAd;AACA,OAAKM,IAAL,GAAYL,IAAI,CAACK,IAAjB;AACA,SAAO,IAAP;AACD;;AAED,eAAeR,QAAf","sourcesContent":["import ListCache from './_ListCache.js';\r\nimport Map from './_Map.js';\r\nimport MapCache from './_MapCache.js';\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\nfunction stackSet(key, value) {\r\n  var data = this.__data__;\r\n  if (data instanceof ListCache) {\r\n    var pairs = data.__data__;\r\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n      pairs.push([key, value]);\r\n      this.size = ++data.size;\r\n      return this;\r\n    }\r\n    data = this.__data__ = new MapCache(pairs);\r\n  }\r\n  data.set(key, value);\r\n  this.size = data.size;\r\n  return this;\r\n}\r\n\r\nexport default stackSet;\r\n"]},"metadata":{},"sourceType":"module"}